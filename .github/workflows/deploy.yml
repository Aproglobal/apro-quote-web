name: Deploy Firebase Functions

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    env:
      # GitHub Secrets에 반드시 추가:
      # FIREBASE_PROJECT_ID = apro-quote-web-475705
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      # Puppeteer가 필요 없으면 주석 해제(네트워크/시간 절약)
      # PUPPETEER_SKIP_DOWNLOAD: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (no cache here)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # GitHub Secrets: GCP_SA_KEY = github-deployer 서비스계정 키 JSON
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Install Firebase CLI (retry)
        run: |
          for i in 1 2 3; do
            npm i -g firebase-tools@latest && break || {
              echo "firebase-tools install failed ($i/3). retry in 10s..."
              sleep 10
            }
          done

      - name: Harden npm (timeouts & retries)
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 3
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-timeout 600000
          npm config set registry "https://registry.npmjs.org/"

      # ---------- lockfile 먼저 생성 ----------
      - name: Generate ephemeral lockfile
        working-directory: functions
        run: |
          for i in 1 2 3; do
            npm i --package-lock-only --ignore-scripts --no-audit --progress=false && break || {
              echo "lockfile gen failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      # ---------- ~/.npm 캐시를 lockfile 해시로 복구 ----------
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # ---------- 의존성 설치 ----------
      - name: Install deps (functions) with retry
        working-directory: functions
        run: |
          for i in 1 2 3; do
            npm ci --no-audit --progress=false && break || {
              echo "npm ci failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      - name: Build (functions)
        working-directory: functions
        run: npm run build --if-present

      # ---------- 필수 API 보장 ----------
      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      # ---------- 런타임 서비스계정에 Secret 접근권 ----------
      - name: Grant Secret Accessor to runtime SAs
        run: |
          PROJECT_NUMBER=$(gcloud projects describe "${FIREBASE_PROJECT_ID}" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${RUNTIME_SA}" \
            --role="roles/secretmanager.secretAccessor"

          # (겸용) App Engine 기본 SA도 시도(없으면 무시)
          APPSPOT_SA="${FIREBASE_PROJECT_ID}@appspot.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${APPSPOT_SA}" \
            --role="roles/secretmanager.secretAccessor" || true

      # ---------- Deploy ----------
      - name: Deploy Functions
  run: |
    firebase deploy --only functions --project "$FIREBASE_PROJECT_ID" --force
