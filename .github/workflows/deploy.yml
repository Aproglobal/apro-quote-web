# .github/workflows/deploy.yml
name: "CI: Firebase Deploy + Auto UI Deps PR"

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  packages: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  deploy:
    name: "Deploy to Firebase"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            firestore.googleapis.com \
            firebaserules.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            storage.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      - name: Patch .firebaserc (optional)
        run: |
          if [ -f ".firebaserc" ]; then
            sed -i "s/\"default\": \".*\"/\"default\": \"${FIREBASE_PROJECT_ID}\"/g" .firebaserc || true
          fi

      # ---------- Firestore Rules ----------
      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules --project "${FIREBASE_PROJECT_ID}"

      # ---------- Functions ----------
      - name: Set Functions Secret (OPENAI_API_KEY)
        if: env.OPENAI_API_KEY != ''
        run: |
          printf '%s' "$OPENAI_API_KEY" | firebase functions:secrets:set OPENAI_API_KEY \
            --project "$FIREBASE_PROJECT_ID" \
            --non-interactive

      - name: Install deps (functions)
        working-directory: functions
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Functions
        working-directory: functions
        run: npm run build --if-present

      - name: Deploy Functions
        run: firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}" --non-interactive

      # ---------- Web ----------
      # 0) UI 의존성 점검 및 package.json/lock만 갱신
      - name: Ensure UI deps in web (framer-motion, lucide-react)
        id: ensure_ui_deps
        working-directory: web
        continue-on-error: true
        shell: bash
        run: |
          node - <<'JS'
          const fs = require('fs');
          const path = 'package.json';
          const need = { "framer-motion": "^11.2.10", "lucide-react": "^0.460.0" };
          const pkg = JSON.parse(fs.readFileSync(path,'utf8'));
          let dirty = false;
          for (const [name, ver] of Object.entries(need)) {
            const has = (pkg.dependencies && pkg.dependencies[name]) || (pkg.devDependencies && pkg.devDependencies[name]);
            if (!has) {
              pkg.dependencies ||= {};
              pkg.dependencies[name] = ver;
              dirty = true;
              console.log(`[add] ${name}@${ver}`);
            }
          }
          if (dirty) {
            fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
            process.exit(42); // 표시용 비정상 종료 -> outcome=failure로 잡아 조건 분기
          } else {
            console.log('UI deps OK');
          }
          JS

      - name: Update lock only (web) if deps were added
        if: steps.ensure_ui_deps.outcome == 'failure'
        working-directory: web
        run: npm i --package-lock-only --no-audit --progress=false

      # 1) 설치/빌드 (lock이 있으면 ci, 없으면 i)
      - name: Install deps (web)
        working-directory: web
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Web
        working-directory: web
        run: npm run build

      # 2) web/package.json 변경이 있었다면 자동 PR 생성 (한 워크플로우 내에서 처리)
      - name: Create Pull Request for added UI deps
        if: steps.ensure_ui_deps.outcome == 'failure'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(web): add UI deps (framer-motion, lucide-react) [skip ci]"
          title: "chore(web): add UI deps (framer-motion, lucide-react)"
          body: |
            CI가 web 빌드 시 필요한 UI 의존성을 감지하여 추가했습니다.
            - framer-motion
            - lucide-react
          labels: dependencies
          base: main
          branch: chore/ui-deps
          branch-suffix: timestamp
          add-paths: |
            web/package.json
            web/package-lock.json

      - name: Deploy Hosting
        run: firebase deploy --only hosting --project "${FIREBASE_PROJECT_ID}" --non-interactive
