name: Deploy Firebase (Functions & Hosting)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    env:
      # GitHub Secrets에 반드시 추가:
      #   - FIREBASE_PROJECT_ID  (예: apro-quote-web-475705)
      #   - GCP_SA_KEY           (github-deployer 서비스계정 키 JSON)
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      # 기본값은 루트(.)이지만, 아래 단계에서 자동 탐지됨
      FRONTEND_DIR: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Install Firebase CLI (retry)
        run: |
          for i in 1 2 3; do
            npm i -g firebase-tools@latest && break || {
              echo "firebase-tools install failed ($i/3). retry in 10s..."
              sleep 10
            }
          done

      - name: Harden npm (timeouts & retries)
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 3
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-timeout 600000
          npm config set registry "https://registry.npmjs.org/"

      # ====== 프런트엔드 디렉터리 자동 탐지 (. / web / frontend / app / client) ======
      - name: Detect frontend directory
        id: detect-frontend
        run: |
          set -e
          CANDIDATES=("$FRONTEND_DIR" "web" "frontend" "app" "client")
          DETECTED=""
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/package.json" ]; then
              DETECTED="$d"
              break
            fi
          done
          if [ -n "$DETECTED" ]; then
            echo "Detected frontend at: $DETECTED"
            echo "FRONTEND_DIR=$DETECTED" >> "$GITHUB_ENV"
          else
            echo "No frontend package.json found. Will create a placeholder site."
            echo "FRONTEND_DIR=" >> "$GITHUB_ENV"
          fi

      # ====== 프런트엔드 의존성 설치/빌드 (발견됐을 때만) ======
      - name: Install deps (web)
        if: env.FRONTEND_DIR != ''
        run: |
          (cd "$FRONTEND_DIR" && npm ci)

      - name: Build (web)
        if: env.FRONTEND_DIR != ''
        run: |
          (cd "$FRONTEND_DIR" && npm run build)

      # ---------- functions: lockfile 먼저 생성 ----------
      - name: Generate ephemeral lockfile (functions)
        working-directory: functions
        run: |
          for i in 1 2 3; do
            npm i --package-lock-only --ignore-scripts --no-audit --progress=false && break || {
              echo "lockfile gen failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      # ---------- ~/.npm 캐시 (functions lockfile 기준) ----------
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # ---------- functions 의존성 설치/빌드 ----------
      - name: Install deps (functions) with retry
        working-directory: functions
        run: |
          for i in 1 2 3; do
            npm ci --no-audit --progress=false && break || {
              echo "npm ci failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      - name: Build (functions)
        working-directory: functions
        run: npm run build --if-present

      # ---------- 필수 API 보장 ----------
      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            pubsub.googleapis.com \
            storage.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      # ---------- 런타임 서비스계정에 Secret 접근권 ----------
      - name: Grant Secret Accessor to runtime SAs
        run: |
          PROJECT_NUMBER=$(gcloud projects describe "${FIREBASE_PROJECT_ID}" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${RUNTIME_SA}" \
            --role="roles/secretmanager.secretAccessor"

          APPSPOT_SA="${FIREBASE_PROJECT_ID}@appspot.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${APPSPOT_SA}" \
            --role="roles/secretmanager.secretAccessor" || true

      # ====== Hosting용 빌드 폴더 보장 ======
      # - CRA:   <frontend>/build
      # - Vite:  <frontend>/dist
      # - Next:  <frontend>/out  (next export 기준)
      # 없으면 임시 index.html 생성
      - name: Ensure Hosting build folder
        run: |
          set -e
          SRC=""
          if [ -n "$FRONTEND_DIR" ] && [ -d "$FRONTEND_DIR/build" ]; then SRC="$FRONTEND_DIR/build"; fi
          if [ -z "$SRC" ] && [ -n "$FRONTEND_DIR" ] && [ -d "$FRONTEND_DIR/dist" ]; then SRC="$FRONTEND_DIR/dist"; fi
          if [ -z "$SRC" ] && [ -n "$FRONTEND_DIR" ] && [ -d "$FRONTEND_DIR/out" ]; then SRC="$FRONTEND_DIR/out"; fi

          rm -rf build
          if [ -n "$SRC" ]; then
            echo "Using frontend build from: $SRC"
            # 심볼릭 링크가 안되면 복사
            ln -s "$SRC" build 2>/dev/null || { mkdir -p build && rsync -a "$SRC/." build/; }
          else
            echo "No frontend output found. Creating a placeholder site."
            mkdir -p build
            cat > build/index.html <<'HTML'
            <!doctype html>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width,initial-scale=1" />
            <title>Firebase Hosting is up</title>
            <style>
              body{font-family:system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin:0;display:grid;place-items:center;height:100vh}
              .card{padding:32px;border:1px solid #e5e7eb;border-radius:16px;box-shadow:0 10px 15px rgba(0,0,0,.05)}
            </style>
            <div class="card">
              <h1>🚀 Hosting OK</h1>
              <p>배포 성공! 프런트 빌드를 연결하면 여기가 앱의 루트가 됩니다.</p>
            </div>
            HTML
          fi
          ls -alh build | head -n 20

      # ---------- Deploy (Functions + Hosting) ----------
      - name: Deploy Firebase
        run: |
          firebase deploy --only functions,hosting --project "${FIREBASE_PROJECT_ID}" --force
