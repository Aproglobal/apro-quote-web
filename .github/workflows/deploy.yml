name: Deploy Firebase Functions

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    env:
      # GitHub Secrets에 반드시 이 키를 추가: FIREBASE_PROJECT_ID=apro-quote-web-475705
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      # Puppeteer가 크로미움 다운로드 필요 없으면 주석 해제(네트워크 안정성↑)
      # PUPPETEER_SKIP_DOWNLOAD: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # functions/ 기준으로 캐시 키 산출
          cache-dependency-path: functions/package-lock.json

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # GitHub Secrets에 GCP_SA_KEY(=github-deployer 서비스계정 키 JSON) 저장 필수
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Install Firebase CLI (retry)
        run: |
          for i in 1 2 3; do
            npm i -g firebase-tools@latest && break || {
              echo "firebase-tools install failed ($i/3). retry in 10s..."
              sleep 10
            }
          done

      - name: Harden npm (timeouts & retries)
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 3
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set timeout 600000
          npm config set registry "https://registry.npmjs.org/"

      # ---------- functions 의존성(로컬 없이) ----------
      # 잠깐짜리 lockfile을 CI에서 생성 → 그걸로 npm ci (결정론적 설치, 같은 런 안에서 안정)
      - name: Generate ephemeral lockfile (no local needed)
        working-directory: functions
        run: |
          # lockfile만 생성(설치 X) → 네트워크 한번
          for i in 1 2 3; do
            npm i --package-lock-only --ignore-scripts --no-audit --progress=false && break || {
              echo "lockfile gen failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      - name: Install deps (functions) with retry (using lockfile)
        working-directory: functions
        run: |
          for i in 1 2 3; do
            npm ci --no-audit --progress=false && break || {
              echo "npm ci failed ($i/3). retry in 20s..."
              sleep 20
            }
          done

      - name: Build (functions)
        working-directory: functions
        run: npm run build --if-present

      # ---------- 필수 API 보장 (idempotent) ----------
      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      # ---------- 런타임 서비스계정에 Secret 접근권 부여 (Gen2 기본 계정) ----------
      - name: Grant Secret Accessor to runtime SAs
        run: |
          PROJECT_NUMBER=$(gcloud projects describe "${FIREBASE_PROJECT_ID}" --format='value(projectNumber)')

          # Cloud Functions Gen2 기본 런타임 SA (Cloud Run/Compute default)
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${RUNTIME_SA}" \
            --role="roles/secretmanager.secretAccessor"

          # (겸사겸사) Gen1/기타에서 쓰일 수 있는 App Engine default SA도 허용 - 실패해도 무시
          APPSPOT_SA="${FIREBASE_PROJECT_ID}@appspot.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "${FIREBASE_PROJECT_ID}" \
            --member="serviceAccount:${APPSPOT_SA}" \
            --role="roles/secretmanager.secretAccessor" || true

      # ---------- Deploy ----------
      - name: Deploy Functions
        run: firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}"
