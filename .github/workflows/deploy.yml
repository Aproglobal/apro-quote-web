# .github/workflows/deploy.yml
name: CI: UI deps PR & Firebase Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      action:
        description: "무엇을 실행할까요?"
        type: choice
        required: true
        default: "deploy"
        options:
          - deploy
          - ensure-ui-deps-pr
      pr_base:
        description: "PR 대상 브랜치 (기본 main)"
        required: false
        default: "main"

permissions:
  contents: write          # PR/커밋 푸시용
  pull-requests: write     # PR 생성/업데이트
  packages: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # ① UI 의존성 자동 설치 → 브랜치 푸시 → PR 생성
  ui_deps_pr:
    name: "Ensure UI deps & open PR"
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'ensure-ui-deps-pr'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install UI deps (web)
        working-directory: web
        run: |
          # 항상 설치해도 이미 있으면 up to date라 빠르게 끝납니다.
          npm i --save framer-motion lucide-react
          npm i --package-lock-only

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(web): add UI deps (framer-motion, lucide-react)"
          title: "chore(web): add UI deps (framer-motion, lucide-react)"
          body: |
            LiveQuoteStudio.tsx에서 사용하는 framer-motion, lucide-react를 web/package.json에 추가합니다.
            - npm install --save framer-motion lucide-react
          labels: dependencies
          base: ${{ inputs.pr_base }}
          branch: chore/ui-deps
          branch-suffix: timestamp
          add-paths: |
            web/package.json
            web/package-lock.json

  # ② Firebase 배포(Functions + Hosting + Rules)
  deploy:
    name: "Deploy to Firebase"
    # 수동 실행이면 action=deploy일 때만, 푸시(main)면 항상
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && inputs.action == 'deploy')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            firestore.googleapis.com \
            firebaserules.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            storage.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      - name: Patch .firebaserc (optional)
        run: |
          if [ -f ".firebaserc" ]; then
            sed -i "s/\"default\": \".*\"/\"default\": \"${FIREBASE_PROJECT_ID}\"/g" .firebaserc || true
          fi

      # ---- Firestore Rules ----
      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules --project "${FIREBASE_PROJECT_ID}"

      # ---- Secret (Functions) ----
      - name: Set Functions Secret (OPENAI_API_KEY)
        if: env.OPENAI_API_KEY != ''
        run: |
          printf '%s' "$OPENAI_API_KEY" | firebase functions:secrets:set OPENAI_API_KEY \
            --project "$FIREBASE_PROJECT_ID" \
            --non-interactive

      # ---- Functions ----
      - name: Install deps (functions)
        working-directory: functions
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Functions
        working-directory: functions
        run: npm run build --if-present

      - name: Deploy Functions
        run: firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}" --non-interactive

      # ---- Web (Vite → Hosting) ----
      - name: Install deps (web)
        working-directory: web
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Web
        working-directory: web
        run: npm run build

      - name: Deploy Hosting
        run: firebase deploy --only hosting --project "${FIREBASE_PROJECT_ID}" --non-interactive
