name: Deploy to Firebase (Hosting + Functions + Rules)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# PR 자동 생성 액션을 위해 권한 부여
permissions:
  contents: write
  pull-requests: write

# 같은 브랜치에서 동시에 둘 이상 배포 방지
concurrency: deploy-${{ github.ref }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # GitHub Secrets에 미리 등록
      # - FIREBASE_PROJECT_ID (예: apro-quote-web-475705)
      # - GCP_SA_KEY          (서비스계정 키 JSON)
      # - OPENAI_API_KEY      (선택: Functions에서 사용)
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # PR_TOKEN이 있으면 사용, 없으면 기본 GITHUB_TOKEN 사용
      PR_TOKEN: ${{ secrets.PR_TOKEN || github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Enable required Google APIs
        run: |
          gcloud services enable \
            firebase.googleapis.com \
            firestore.googleapis.com \
            firebaserules.googleapis.com \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com \
            storage.googleapis.com \
            run.googleapis.com \
            eventarc.googleapis.com \
            --project "${FIREBASE_PROJECT_ID}"

      - name: Patch .firebaserc (optional)
        run: |
          if [ -f ".firebaserc" ]; then
            sed -i "s/\"default\": \".*\"/\"default\": \"${FIREBASE_PROJECT_ID}\"/g" .firebaserc || true
          fi

      # ---------- Firestore Rules ----------
      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules --project "${FIREBASE_PROJECT_ID}"

      # ---------- Secrets (Functions) ----------
      - name: Set Functions Secret (OPENAI_API_KEY)
        if: env.OPENAI_API_KEY != ''
        run: |
          printf '%s' "$OPENAI_API_KEY" | firebase functions:secrets:set OPENAI_API_KEY \
            --project "$FIREBASE_PROJECT_ID" --non-interactive

      # ---------- Cloud Functions ----------
      - name: Install deps (functions)
        working-directory: functions
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Functions
        working-directory: functions
        run: npm run build --if-present

      - name: Deploy Functions
        run: firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}" --non-interactive

      # ---------- Web (Vite) ----------
      # 필요 UI 의존성 자동 보정: 없으면 package.json 수정 후 '의도적 실패(42)' 반환
      - name: Ensure UI deps (framer-motion, lucide-react)
        id: ensure_ui_deps
        working-directory: web
        continue-on-error: true
        run: |
          node - <<'JS'
          const fs = require('fs');
          const path = 'package.json';
          const need = { "framer-motion": "^11.2.10", "lucide-react": "^0.460.0" };
          const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
          let dirty = false;
          for (const [name, ver] of Object.entries(need)) {
            const has = (pkg.dependencies && pkg.dependencies[name]) || (pkg.devDependencies && pkg.devDependencies[name]);
            if (!has) {
              pkg.dependencies ||= {};
              pkg.dependencies[name] = ver;
              dirty = true;
              console.log(`[add] ${name}@${ver}`);
            }
          }
          if (dirty) {
            fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
            process.exit(42); // 변경 발생: 뒤 단계 if 조건 분기에서 사용
          } else {
            console.log('UI deps OK');
          }
          JS

      # 위 단계에서 package.json이 변경되었으면 lock 파일 생성
      - name: Generate lockfile (only when deps added)
        if: steps.ensure_ui_deps.outcome == 'failure'
        working-directory: web
        run: npm i --package-lock-only --no-audit --progress=false

      - name: Install deps (web)
        working-directory: web
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --progress=false; else npm i; fi

      - name: Build Web
        working-directory: web
        run: npm run build

      # ✅ PR 생성 전에 Hosting 배포를 먼저 수행 (PR 실패해도 배포 성공)
      - name: Deploy Hosting
        run: firebase deploy --only hosting --project "${FIREBASE_PROJECT_ID}" --non-interactive

      # ---------- Optional: 자동 PR 생성 (조직 정책으로 막혀도 워크플로우는 성공) ----------
      - name: Create Pull Request for added UI deps (optional)
        if: steps.ensure_ui_deps.outcome == 'failure'
        continue-on-error: true
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ env.PR_TOKEN }}
          commit-message: chore(web): add UI deps (framer-motion, lucide-react) [skip ci]
          title: chore(web): add UI deps (framer-motion, lucide-react)
          body: |
            CI가 web 빌드 시 필요한 UI 의존성을 감지하여 package.json과 lock 파일을 추가/갱신했습니다.
            - framer-motion
            - lucide-react
          labels: dependencies
          base: main
          branch: chore/ui-deps
          branch-suffix: timestamp
          add-paths: |
            web/package.json
            web/package-lock.json
